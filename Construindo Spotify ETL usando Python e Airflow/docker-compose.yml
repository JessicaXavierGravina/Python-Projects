# Licenciado para Apache Software Foundation (ASF) sob um
# ou mais contratos de licença de contribuidor. Veja o arquivo AVISO
# distribuído com este trabalho para informações adicionais
# em relação à propriedade de direitos autorais. A ASF licencia este arquivo
# para você sob a Licença Apache, Versão 2.0 (o
# "Licença"); você não pode usar este arquivo, exceto em conformidade
# com a Licença. Você pode obter uma cópia da Licença em
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# A menos que exigido pela lei aplicável ou acordado por escrito,
# software distribuído sob a Licença é distribuído em um
# BASE "COMO ESTÁ", SEM GARANTIAS OU CONDIÇÕES DE QUALQUER
# KIND, expresso ou implícito. Veja a Licença para o
# idioma específico que rege permissões e limitações
# sob a Licença.
#

# Configuração básica do cluster Airflow para CeleryExecutor com Redis e PostgreSQL.
#
# AVISO: Esta configuração é para desenvolvimento local. Não o use em uma implantação de produção.
#
# Esta configuração suporta configuração básica usando variáveis ​​de ambiente ou um arquivo .env
# As seguintes variáveis ​​são suportadas:
#
# AIRFLOW_IMAGE_NAME - Nome da imagem do Docker usada para executar o Airflow.
#                                 Padrão: apache/airflow:2.5.1
# AIRFLOW_UID - ID do usuário em contêineres Airflow
#                                 Padrão: 50000
# AIRFLOW_PROJ_DIR - Caminho base para o qual todos os arquivos serão volumed.
#                                 Padrão: .
# Essas configurações são úteis principalmente no caso de teste autônomo/execução do Airflow no modo de teste/experiência
#
# _AIRFLOW_WWW_USER_USERNAME - Nome de usuário para a conta de administrador (se solicitado).
#                                 Padrão: fluxo de ar
# _AIRFLOW_WWW_USER_PASSWORD - Senha para a conta do administrador (se solicitado).
#                                 Padrão: fluxo de ar
# _PIP_ADDITIONAL_REQUIREMENTS - Requisitos PIP adicionais a serem adicionados ao iniciar todos os contêineres.
#                                 Padrão: ''
#
# Sinta-se à vontade para modificar este arquivo para atender às suas necessidades.
---

version: '3'
x-airflow-common:
  &airflow-common
  # In order to add custom dependencies or upgrade provider packages you can use your extended image.
  # Comment the image line, place your Dockerfile in the directory where you placed the docker-compose.yaml
  # and uncomment the "build" line below, Then run `docker-compose build` to build the images.
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.5.1}
  # build: .
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    # For backward compatibility, with Airflow <2.3
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow

volumes:
  postgres-db-volume: